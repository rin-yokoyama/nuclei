# EventPlotter.py generated by R. Yokoyama on 10/05/2018
import ROOT

class EventPlotter:
    # A class for plotting DecayEvent objects as a ROOT histograms
    def __init__(self, config_yaml):
        self.config = config_yaml
        self.hist_names = ['n_decay','decay_activity','activity_0n','activity_1n','activity_2n','activity_3n','n_ave']
        self.hist_dict = dict()
        for hist_name in self.hist_names:
            h_config = self.config[hist_name]
            self.hist_dict.update({hist_name: ROOT.TH1D(hist_name,hist_name,int(h_config['nbins']),float(h_config['low']),float(h_config['up']))})

    def fillDecays(self,decay_list):
        # fills decay events to the histograms
        for decay in decay_list:
            self.hist_dict['n_decay'].Fill(len(decay.event_list))
            n_neutron = 0
            for event in decay.event_list:
                self.hist_dict['decay_activity'].Fill(event.time)
                if event.n_neutron == 0:
                    self.hist_dict['activity_0n'].Fill(event.time)
                elif event.n_neutron == 1:
                    self.hist_dict['activity_1n'].Fill(event.time)
                elif event.n_neutron == 2:
                    self.hist_dict['activity_2n'].Fill(event.time)
                elif event.n_neutron == 3:
                    self.hist_dict['activity_3n'].Fill(event.time)
                   
                n_neutron = n_neutron + event.n_neutron
            self.hist_dict['n_ave'].Fill(n_neutron)

    def writeHistograms(self):
        # needs to be called after a ROOT file is opened
        for key in self.hist_dict:
            self.hist_dict[key].Write()

